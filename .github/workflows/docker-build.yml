on:
  workflow_call:
    inputs:
      # How many of the latest images
      # to keep alive in the registry
      # for this specific repo.
      images-to-keep:
        required: false
        type: number
        default: 3

      # Notification avatar url to send with the
      # webhook.
      avatar-url:
        required: false
        type: string
        default: "https://i.imgur.com/KmBZ55C.jpg"

    secrets:
      # The token to use for any dependencies
      # that the service might need to install
      github-token:
        required: true

      # Project where the images will be pushed
      gcr-project-id:
        required: true
      
      # The service account credentials for
      # the GCR project.
      gcr-credentials:
        required: true

      # Webhook id for notifying
      # when the build is finished.
      webhook-id:
        required: true

      # Token for the webhook that's going
      # to be used.
      webhook-token:
        required: true


jobs:
  build-push:
    runs-on: ubuntu-latest
    
    env:
      AUTH_TOKEN: ${{ secrets.github-token }}
      GCR_PROJECT_ID: ${{ secrets.gcr-project-id }}
      KEEP: ${{ inputs.images-to-keep }}

    steps:
      - uses: actions/checkout@v2

      # Login to gcp
      - uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.gcr-credentials }}

      # Configure docker credentials
      - name: Configure docker credentials
        run: gcloud auth configure-docker -q

      # Build the docker image
      - name: Build and push image
        run: |
          # Separate repo name from the author
          export REPO_NAME=$( echo $GITHUB_REPOSITORY | awk -F '/' '{print $2}' )
          export IMAGE_VERSION=$( echo $GITHUB_SHA | cut -c1-7 )

          # Build the full image tag
          export IMAGE_NAME="$REPO_NAME:$IMAGE_VERSION"

          # Export things for other steps to use
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
          echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

          # Build the image
          DOCKER_BUILDKIT=1 docker build . --file Dockerfile --build-arg GITHUB_TOKEN=$AUTH_TOKEN -t "eu.gcr.io/$GCR_PROJECT_ID/$IMAGE_NAME"

          # Push the image
          docker push eu.gcr.io/$GCR_PROJECT_ID/$IMAGE_NAME

      # Cleanup
      - name: Clean up old images
        run: |
          export repository=${{ env.REPO_NAME }}

          export digests=$( gcloud container images list-tags eu.gcr.io/$GCR_PROJECT_ID/$repository --format='get(digest)' )
          export to_delete=$( echo "$digests" | sed -e "1,${KEEP}d" )

          for digest in $to_delete; do
            gcloud container images delete eu.gcr.io/$GCR_PROJECT_ID/$repository@$digest --quiet --force-delete-tags
          done

      - name: Notify
        uses: appleboy/discord-action@master
        continue-on-error: true
        with:
          webhook_id: ${{ secrets.webhook-id }}
          webhook_token: ${{ secrets.webhook-token }}
          username: ${{ env.REPO_NAME }}
          message: "ready for release: `${{ env.IMAGE_NAME }}`"
          avatar_url: ${{ inputs.avatar-url }}

